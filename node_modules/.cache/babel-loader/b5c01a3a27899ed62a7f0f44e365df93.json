{"ast":null,"code":"var _jsxFileName = \"/Users/michalpiotrowski/Desktop/programming/CodersLab/netflix_clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original\"; // const przefiltrowanaTablica = res.filter(el => el.cosCharakterystycznego !== \"nie ma\")\n\nconst Row = _ref => {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request.data.results, \"requestresults\");\n      setMovies(request.data.results.filter(el => !!el.backdrop_path));\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const onPlay = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \" \").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  console.log(movies);\n  return !!movies.length && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => onPlay(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/michalpiotrowski/Desktop/programming/CodersLab/netflix_clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","console","log","data","results","filter","el","backdrop_path","opts","height","width","playerVars","autoplay","onPlay","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","length","map","poster_path","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\n// const przefiltrowanaTablica = res.filter(el => el.cosCharakterystycznego !== \"nie ma\")\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request.data.results, \"requestresults\");\n      setMovies(request.data.results.filter((el) => !!el.backdrop_path));\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const onPlay = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \" \")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  console.log(movies);\n  return (\n    !!movies.length && (\n      <div className=\"row\">\n        <h1 className=\"row__title\">{title}</h1>\n        <div className=\"row__posters\">\n          {movies.map((movie) => (\n            <img\n              onClick={() => onPlay(movie)}\n              key={movie.id}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n              alt={movie.name}\n            />\n          ))}\n        </div>\n        {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n      </div>\n    )\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}